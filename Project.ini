#include <IRremote.hpp>
#include <LiquidCrystal_I2C.h>
#define UP 2 //Up button command
#define RIGHT 5 //Right button command
#define DOWN 10 //Down button command
#define LEFT 7 //Left button command
#define TH 65 //Threshold to track
#define SP 10 //Set point for LDRs
//Pin definitions 
#define mode_pin 2 //Mode switch, 0=manual, 1=automatic
#define Ir_in 3 //IR receiver pin
#define ENA 5 //Left/right motor enable
#define in1_H 8 //Input 1 for left/right motor
#define in2_H 9 //Input 2 for left/right motor
#define ENB 6 //Up/down motor enable 
#define in1_V 10 //Input 1 for up/down motor
#define in2_V 11 //Input 2 for up/down motor
#define botr_pin A0 //Bottom right LDR
#define botl_pin A1 //Bottom left LDR
#define topr_pin A2 //Top right LDR
#define topl_pin A3 //Top left LDR
INTRODUCTION TO EMBEDDED SYSTEMS 
 
//Initializations
bool mode=LOW;
int lighting=770;
float error_old=0;
float I_old=0;
float I_term=0;
LiquidCrystal_I2C lcd(0x27, 16, 2);
void lcd_print(String m) { 
 lcd.clear();
 lcd.home();
 lcd.print(m);
 delay(300);
 const char* holder=m.c_str();
 int len=strlen(holder);
 if (len>16) {
 for (int i=0; i<len; i++) {
 lcd.scrollDisplayLeft();
 delay(100);
 }
 }
}
INTRODUCTION TO EMBEDDED SYSTEMS 
 
void manual() { //Manual mode 
 Serial.println(IrReceiver.decodedIRData.command); //Show recieved command for 
debugging
 switch(IrReceiver.decodedIRData.command){ //Incoming IR command
 case UP: 
 lcd_print("UP");
 motor_write(ENB, 150, 40, in1_V, HIGH, in2_V, LOW);
 break;
 case DOWN: 
 lcd_print("DOWN");
 motor_write(ENB, 130, 40, in1_V, LOW, in2_V, HIGH);
 break;
 case RIGHT: 
 lcd_print("RIGHT");
 motor_write(ENA, 150, 100, in1_H, HIGH, in2_H, LOW);
 break;
 case LEFT: 
 lcd_print("LEFT");
 motor_write(ENA, 150, 100, in1_H, LOW, in2_H, HIGH);
 break;
 default:
 lcd_print("Invalid Movement Command");
 } 
 IrReceiver.resume();
INTRODUCTION TO EMBEDDED SYSTEMS 
 
}
void motor_write(int en_pin, int spd, int D, int in1, bool command1, int in2, bool command2) {
 analogWrite(en_pin, spd);
 digitalWrite(in1, command1);
 digitalWrite(in2, command2);
 delay(D);
 analogWrite(en_pin, 0);
}
void change_mode() { //Change mode on push-button press
 mode=(mode==LOW)?HIGH:LOW; 
 Serial.println(mode);
}
void scan_mode() { //Check if mode changed
 static bool previous_state=LOW;
 if (previous_state==mode) {
 return;
 } else if (previous_state!=mode) {
 if (mode==1) {
 lcd_print("Automatic Mode");
 previous_state=HIGH;
 } else if (mode==0) {
 lcd_print("Manual Mode");
 previous_state=LOW;
 }
INTRODUCTION TO EMBEDDED SYSTEMS 
 
 }
}
int calc_speed(float error) { //Perform PID control and calculate motor speed
 float Kp=3.2; float Ki=0.2; float Kd=1; //PID constants
 float P_term=Kp*error; //Proportional term
 float I_term=I_term+(Ki*error); //Integral term
 float D_term=Kd*(error-error_old); //Derivative term
 float PID=P_term+I_term+D_term; //PID formula
 if ((PID>1000) || (PID<0)) { //Set bounds to avoid integral wind-up
 I_term=I_old; 
 PID=P_term+I_term+D_term; 
 }
 error_old=error; 
 I_old=I_term;
 int r_speed=(PID/1000.0)*250; //Calculate rotation speed
 r_speed =(r_speed<0)?0:((r_speed>250)?250:r_speed); //Set limits for rotation speed
 Serial.print("Error: "); Serial.println(error); //Show error on serial monitor for debugging
 Serial.print("PID: "); Serial.println(PID); //Show PID on serial monitor for debugging
 Serial.print("Speed :");Serial.println(r_speed); //Show rotation speed on serial monitor 
for debugging
 return r_speed;
 
}
void solar_track() { //Automatic mode for solar tracker
INTRODUCTION TO EMBEDDED SYSTEMS 
 
 int topl=analogRead(topl_pin); //Top left LDR reading
 int topr=analogRead(topr_pin); //Top right LDR reading
 int botl=analogRead(botl_pin); //Bottom left LDR reading
 int botr=analogRead(botr_pin); //Bottom right LDR reading
// if (topl >= lighting || topr >= lighting || botl >= lighting || botr >= lighting ){ //Condition to turn 
on solar tracking only when there's light directed at the sensors
 int avg_top=(topl+topr)/2; //Average top reading
 int avg_bot=(botl+botr)/2; //Average bottom reading
 int avg_left=(topl+botl)/2; //Average left reading
 int avg_right=(topr+botr)/2; //Average right reading
 int diff_ver=avg_top-avg_bot; //Vertical difference
 int diff_hor=avg_left-avg_right; //Horizontal difference
 Serial.print(topl);Serial.print(" ");Serial.println(topr); //Show topside LDR 
readings on serial monitor for debugging
 Serial.print(botl);Serial.print(" ");Serial.println(botr); //Show botside LDR 
readings on serial monitor for debugging
 if (abs(diff_ver)>TH) { //Check if vertical difference is more than tracking threshold
 float e=SP-diff_ver; //Calculate error between set point and vertical difference
 if (e>0) { //Check if bot readings are higher
 int speed=calc_speed(e); 
 motor_write(ENB, speed, 30, in1_V, HIGH, in2_V, LOW); //Move down
 delay(200);
 } else if (e<0) { //Check if top readings are higher
 e=SP+diff_ver; //Change error sign to calculate speed correctly
 int speed=calc_speed(e); 
INTRODUCTION TO EMBEDDED SYSTEMS 
 
 motor_write(ENB, speed, 30, in1_V, LOW, in2_V, HIGH); //Move up
 delay(200);
 }
 }
 if (abs(diff_hor)>TH) { //Check if horizontal difference is more than threshold
 float e=SP-diff_hor; //Calculate error between set point and horizontal difference
 if (e>0) { //Check if right readings are higher
 int speed=calc_speed(e);
 motor_write(ENA, speed, 50, in1_H, HIGH, in2_H, LOW); //Move right
 } else if (e<0) { //Check if left readings are higher
 e=SP+diff_hor; //Change error sign to calculate speed correctly
 int speed=calc_speed(e);
 motor_write(ENA, speed, 50, in1_H, LOW, in2_H, HIGH); //Move left
 }
 }
 delay(200);
}
//}
void setup() {
 IrReceiver.begin(Ir_in,ENABLE_LED_FEEDBACK); 
 interrupts();
 attachInterrupt(0, change_mode, FALLING);
 Serial.begin(9600);
 pinMode(mode_pin, INPUT_PULLUP);
INTRODUCTION TO EMBEDDED SYSTEMS 
 
 pinMode(ENA,OUTPUT); 
 pinMode(ENB,OUTPUT);
 pinMode(in1_H,OUTPUT);
 pinMode(in2_H,OUTPUT);
 pinMode(in1_V,OUTPUT);
 pinMode(in2_V,OUTPUT);
 digitalWrite(ENA,LOW);
 digitalWrite(ENB,LOW);
 lcd.init(); 
 lcd.backlight(); 
}
void loop() {
 if (mode==LOW) {
 if(IrReceiver.decode())
{
 manual();
}
} else if (mode==HIGH) {
 solar_track();
} 
scan_mode(); 
}
